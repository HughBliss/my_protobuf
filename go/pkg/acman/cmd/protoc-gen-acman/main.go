package main

import (
	"bytes"
	"fmt"
	"github.com/hughbliss/my_protobuf/go/internal/helper"
	acmanperms "github.com/hughbliss/my_protobuf/go/pkg/acman/gen/permissions"
	"go/format"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
	"os"
	"text/template"
)

func main() {
	var req = helper.DecodeRequest()
	var res = &pluginpb.CodeGeneratorResponse{}
	var permissions = make([]*acmanperms.PermissionMeta, 0)
	var methodPermissionMap = make(map[string]*acmanperms.PermissionMeta)
	var permissionsMap = make(map[string]*acmanperms.PermissionMeta)

	f, err := os.Create("./permissions-debug.json")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	//l := zerolog.New(f).With().Timestamp().Logger()

	for _, file := range req.ProtoFile {
		for _, service := range file.Service {
			for _, method := range service.Method {
				permissionMeta := helper.GetOption[acmanperms.PermissionMeta](method.Options, acmanperms.E_Meta)
				if permissionMeta == nil {
					continue
				}
				permissionsMap[permissionMeta.GetAlias()] = permissionMeta
				fullMethodName := fmt.Sprintf("/%s.%s/%s", file.GetPackage(), service.GetName(), method.GetName())
				methodPermissionMap[fullMethodName] = permissionMeta
			}
		}
	}
	for _, meta := range permissionsMap {
		permissions = append(permissions, meta)
	}

	//l.Log().Any("permissions", permissions).Any("methodPermissionMap", methodPermissionMap).Msg("searching success")

	tmpl, err := template.New("acmeta").Parse(templateString)
	if err != nil {
		//l.Error().Err(err).Stack().Msg("parsing template")
		return
	}

	var buf bytes.Buffer
	reg := &struct {
		Permissions         []*acmanperms.PermissionMeta
		MethodPermissionMap map[string]*acmanperms.PermissionMeta
	}{
		Permissions:         permissions,
		MethodPermissionMap: methodPermissionMap,
	}
	if err := tmpl.Execute(&buf, reg); err != nil {
		//l.Error().Err(err).Stack().Msg("executing template")
		return
	}

	//l.Log().Bytes("result", buf.Bytes()).Msg("writing result")

	p, err := format.Source(buf.Bytes())
	if err != nil {
		//l.Error().Err(err).Stack().Msg("formatting code")
		return
	}

	res.File = append(res.File, &pluginpb.CodeGeneratorResponse_File{
		Name:    proto.String("permissions.gen.go"),
		Content: proto.String(string(p)),
	})

	helper.EncodeResponse(res)

}

var templateString = `
// Code generated by protoc-gen-acman. DO NOT EDIT.
package acman

import (
	acmanperms "github.com/hughbliss/my_protobuf/go/pkg/acman/gen/permissions"
)

var Permissions = []*acmanperms.PermissionMeta{
{{range .Permissions}} {
	Alias:       "{{.Alias}}",
	Description: "{{.Description}}",
}, {{end}} 
}

var MethodPermissionMap = map[string]*acmanperms.PermissionMeta{
{{range $index, $element := .MethodPermissionMap}} "{{$index}}":{
	Alias:       "{{.Alias}}",
	Description: "{{.Description}}",
}, {{end}}
}
`
