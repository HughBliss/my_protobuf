// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: admin_auth/users.proto

package admusrserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminUsersService_CreateUser_FullMethodName           = "/some.admin.auth.users.AdminUsersService/CreateUser"
	AdminUsersService_UpdateUser_FullMethodName           = "/some.admin.auth.users.AdminUsersService/UpdateUser"
	AdminUsersService_DeleteUser_FullMethodName           = "/some.admin.auth.users.AdminUsersService/DeleteUser"
	AdminUsersService_GetUsers_FullMethodName             = "/some.admin.auth.users.AdminUsersService/GetUsers"
	AdminUsersService_AssignUserToDomain_FullMethodName   = "/some.admin.auth.users.AdminUsersService/AssignUserToDomain"
	AdminUsersService_RemoveUserFromDomain_FullMethodName = "/some.admin.auth.users.AdminUsersService/RemoveUserFromDomain"
	AdminUsersService_UpdateUserDomainRole_FullMethodName = "/some.admin.auth.users.AdminUsersService/UpdateUserDomainRole"
)

// AdminUsersServiceClient is the client API for AdminUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AdminUsersService предоставляет методы для управления пользователями системы.
type AdminUsersServiceClient interface {
	// CreateUser создает нового пользователя.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// UpdateUser обновляет информацию о пользователе.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// DeleteUser удаляет пользователя.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// GetUsers возвращает список всех пользователей.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// AssignUserToDomain назначает пользователю роль в домене.
	AssignUserToDomain(ctx context.Context, in *AssignUserToDomainRequest, opts ...grpc.CallOption) (*AssignUserToDomainResponse, error)
	// RemoveUserFromDomain удаляет пользователя из домена.
	RemoveUserFromDomain(ctx context.Context, in *RemoveUserFromDomainRequest, opts ...grpc.CallOption) (*RemoveUserFromDomainResponse, error)
	// UpdateUserDomainRole обновляет роль пользователя в домене.
	UpdateUserDomainRole(ctx context.Context, in *UpdateUserDomainRoleRequest, opts ...grpc.CallOption) (*UpdateUserDomainRoleResponse, error)
}

type adminUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminUsersServiceClient(cc grpc.ClientConnInterface) AdminUsersServiceClient {
	return &adminUsersServiceClient{cc}
}

func (c *adminUsersServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) AssignUserToDomain(ctx context.Context, in *AssignUserToDomainRequest, opts ...grpc.CallOption) (*AssignUserToDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignUserToDomainResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_AssignUserToDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) RemoveUserFromDomain(ctx context.Context, in *RemoveUserFromDomainRequest, opts ...grpc.CallOption) (*RemoveUserFromDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromDomainResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_RemoveUserFromDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) UpdateUserDomainRole(ctx context.Context, in *UpdateUserDomainRoleRequest, opts ...grpc.CallOption) (*UpdateUserDomainRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDomainRoleResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_UpdateUserDomainRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminUsersServiceServer is the server API for AdminUsersService service.
// All implementations should embed UnimplementedAdminUsersServiceServer
// for forward compatibility.
//
// AdminUsersService предоставляет методы для управления пользователями системы.
type AdminUsersServiceServer interface {
	// CreateUser создает нового пользователя.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// UpdateUser обновляет информацию о пользователе.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// DeleteUser удаляет пользователя.
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// GetUsers возвращает список всех пользователей.
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// AssignUserToDomain назначает пользователю роль в домене.
	AssignUserToDomain(context.Context, *AssignUserToDomainRequest) (*AssignUserToDomainResponse, error)
	// RemoveUserFromDomain удаляет пользователя из домена.
	RemoveUserFromDomain(context.Context, *RemoveUserFromDomainRequest) (*RemoveUserFromDomainResponse, error)
	// UpdateUserDomainRole обновляет роль пользователя в домене.
	UpdateUserDomainRole(context.Context, *UpdateUserDomainRoleRequest) (*UpdateUserDomainRoleResponse, error)
}

// UnimplementedAdminUsersServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminUsersServiceServer struct{}

func (UnimplementedAdminUsersServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminUsersServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminUsersServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminUsersServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAdminUsersServiceServer) AssignUserToDomain(context.Context, *AssignUserToDomainRequest) (*AssignUserToDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserToDomain not implemented")
}
func (UnimplementedAdminUsersServiceServer) RemoveUserFromDomain(context.Context, *RemoveUserFromDomainRequest) (*RemoveUserFromDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromDomain not implemented")
}
func (UnimplementedAdminUsersServiceServer) UpdateUserDomainRole(context.Context, *UpdateUserDomainRoleRequest) (*UpdateUserDomainRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDomainRole not implemented")
}
func (UnimplementedAdminUsersServiceServer) testEmbeddedByValue() {}

// UnsafeAdminUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminUsersServiceServer will
// result in compilation errors.
type UnsafeAdminUsersServiceServer interface {
	mustEmbedUnimplementedAdminUsersServiceServer()
}

func RegisterAdminUsersServiceServer(s grpc.ServiceRegistrar, srv AdminUsersServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminUsersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminUsersService_ServiceDesc, srv)
}

func _AdminUsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_AssignUserToDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserToDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).AssignUserToDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_AssignUserToDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).AssignUserToDomain(ctx, req.(*AssignUserToDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_RemoveUserFromDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).RemoveUserFromDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_RemoveUserFromDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).RemoveUserFromDomain(ctx, req.(*RemoveUserFromDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_UpdateUserDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDomainRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).UpdateUserDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_UpdateUserDomainRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).UpdateUserDomainRole(ctx, req.(*UpdateUserDomainRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminUsersService_ServiceDesc is the grpc.ServiceDesc for AdminUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "some.admin.auth.users.AdminUsersService",
	HandlerType: (*AdminUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AdminUsersService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AdminUsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminUsersService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AdminUsersService_GetUsers_Handler,
		},
		{
			MethodName: "AssignUserToDomain",
			Handler:    _AdminUsersService_AssignUserToDomain_Handler,
		},
		{
			MethodName: "RemoveUserFromDomain",
			Handler:    _AdminUsersService_RemoveUserFromDomain_Handler,
		},
		{
			MethodName: "UpdateUserDomainRole",
			Handler:    _AdminUsersService_UpdateUserDomainRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_auth/users.proto",
}
